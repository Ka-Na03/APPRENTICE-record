-- インデックスを設定できる

-- 1. インデックス設定前
EXPLAIN ANALYZE
SELECT *
  FROM employees
 WHERE birth_date = '1961-08-03';

/* 
+---------------------------------------------------------------------------------------------------------------------------+
| EXPLAIN                                                                                                                   |
+---------------------------------------------------------------------------------------------------------------------------+
| -> Filter: (employees.birth_date = DATE'1961-08-03')  (cost=29430 rows=29198) (actual time=5.57..85.3 rows=67 loops=1)
    -> Table scan on employees  (cost=29430 rows=291981) (actual time=0.0405..74.4 rows=300024 loops=1)
 |
+---------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.09 sec)
*/

-- 2. インデックスの作成
CREATE INDEX birth_index
          ON employees(birth_date);

-- 3. インデックスの確認

-- 現在のデータベース内に作成されているインデックスの一覧を取得
SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, INDEX_NAME 
  FROM INFORMATION_SCHEMA.STATISTICS 
 WHERE TABLE_SCHEMA='employees';

-- テーブルについてのインデックス情報を取得する
SHOW INDEX 
      FROM employees\G

-- 4. インデックスの効果の確認

/*
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| EXPLAIN                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
| -> Index lookup on employees using birth_index (birth_date=DATE'1961-08-03')  (cost=23.4 rows=67) (actual time=0.214..0.222 rows=67 loops=1)
 |
+-----------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)
*/

-- 5. インデックスの説明

/*
インデックスを利用するとテーブル全体をスキャンする代わりに、インデックスを使用してデータを検索できるから高速に処理できます。
データを特定の範囲に絞り込んで検索できるのが強い。
*/

-- 6. インデックスの削除
DROP INDEX birth_index 
        ON employees;

-- 7. ベストプラクティス
/*
・頻繁に検索や結合するカラムに作成する
・値の多様性(カーディナリティ)が高いカラムに作成すると、より効果的な検索ができる
・インデックスの組み合わせを考慮する
・データベースの容量を増やすので、過剰なインデックス作成はパフォーマンス低下の原因になることもある
・データの変更や削除に合わせてインデックス定期的な最適化を行う